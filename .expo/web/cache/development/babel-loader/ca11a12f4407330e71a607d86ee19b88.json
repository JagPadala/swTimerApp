{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/sidkumar/Documents/swTimerApp/components/TimerScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { ListItem, Button, Icon, Avatar } from 'react-native-elements';\nimport firebase from \"../Firebase\";\n\nvar TimerScreen = function (_Component) {\n  _inherits(TimerScreen, _Component);\n\n  var _super = _createSuper(TimerScreen);\n\n  function TimerScreen(props) {\n    var _this;\n\n    _classCallCheck(this, TimerScreen);\n\n    _this = _super.call(this, props);\n\n    _this.onCollectionUpdate = function (querySnapshot) {\n      var timers = [];\n      querySnapshot.forEach(function (doc) {\n        var _doc$data = doc.data(),\n            name = _doc$data.name,\n            tasks = _doc$data.tasks,\n            image = _doc$data.image;\n\n        timers.push({\n          key: doc.id,\n          doc: doc,\n          name: name,\n          tasks: tasks,\n          image: image\n        });\n      });\n      console.log(\"Setting state\");\n      console.log(_this.state);\n      console.log(timers['name']);\n\n      _this.setState({\n        timers: timers,\n        isLoading: false\n      });\n\n      console.log(\"After setting state\");\n      console.log(timers);\n    };\n\n    _this.ref = firebase.firestore().collection('timers').orderBy('name');\n    _this.unsubscribe = null;\n    _this.state = {\n      isLoading: true,\n      timers: []\n    };\n    return _this;\n  }\n\n  _createClass(TimerScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.unsubscribe = this.ref.onSnapshot(this.onCollectionUpdate);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.isLoading) {\n        return React.createElement(View, {\n          style: styles.activity,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }\n        }, React.createElement(ActivityIndicator, {\n          size: \"large\",\n          color: \"#0000ff\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 21\n          }\n        }));\n      }\n\n      return React.createElement(ScrollView, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }\n      }, this.state.timers.map(function (item, i) {\n        return React.createElement(ListItem, {\n          key: i,\n          bottomDivider: true,\n          onPress: function onPress() {\n            _this2.props.navigation.navigate('RunTimer', {\n              timerkey: \"\" + JSON.stringify(item.key),\n              timerName: \"\" + JSON.stringify(item.name)\n            });\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }\n        }, React.createElement(Avatar, {\n          source: {\n            uri: item.image\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 33\n          }\n        }), React.createElement(ListItem.Content, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 33\n          }\n        }, React.createElement(ListItem.Title, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 37\n          }\n        }, item.name)), React.createElement(TouchableOpacity, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 33\n          }\n        }, React.createElement(Button, {\n          buttonStyle: {\n            padding: 0,\n            backgroundColor: 'transparent'\n          },\n          icon: {\n            name: 'create',\n            style: {\n              marginRight: 20,\n              fontSize: 28\n            }\n          },\n          onPress: function onPress() {\n            _this2.props.navigation.navigate('TimerDetails', {\n              timerkey: \"\" + JSON.stringify(item.key),\n              timerName: \"\" + JSON.stringify(item.name)\n            });\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 37\n          }\n        })), React.createElement(ListItem.Chevron, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 33\n          }\n        }));\n      }));\n    }\n  }]);\n\n  return TimerScreen;\n}(Component);\n\nTimerScreen.navigationOptions = function (_ref) {\n  var navigation = _ref.navigation;\n  return {\n    title: 'My Timers',\n    headerRight: React.createElement(Button, {\n      buttonStyle: {\n        padding: 0,\n        backgroundColor: 'transparent'\n      },\n      icon: {\n        name: 'add-circle',\n        style: {\n          marginRight: 20,\n          fontSize: 28\n        }\n      },\n      onPress: function onPress() {\n        navigation.push('AddTimer');\n      },\n      __self: TimerScreen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    })\n  };\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingBottom: 22\n  },\n  item: {\n    padding: 10,\n    fontSize: 18,\n    height: 44\n  },\n  activity: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default TimerScreen;","map":{"version":3,"sources":["/Users/sidkumar/Documents/swTimerApp/components/TimerScreen.js"],"names":["React","Component","ListItem","Button","Icon","Avatar","firebase","TimerScreen","props","onCollectionUpdate","querySnapshot","timers","forEach","doc","data","name","tasks","image","push","key","id","console","log","state","setState","isLoading","ref","firestore","collection","orderBy","unsubscribe","onSnapshot","styles","activity","container","map","item","i","navigation","navigate","timerkey","JSON","stringify","timerName","uri","padding","backgroundColor","style","marginRight","fontSize","navigationOptions","title","headerRight","StyleSheet","create","flex","paddingBottom","height","position","left","right","top","bottom","alignItems","justifyContent"],"mappings":"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","sourcesContent":["//rohil test\nimport React, { Component } from 'react';\nimport { StyleSheet, ScrollView, ActivityIndicator, View, Text , TouchableOpacity} from 'react-native';\nimport {  ListItem, Button, Icon, Avatar } from 'react-native-elements';\nimport firebase from '../Firebase';\n\nclass TimerScreen extends Component {\n\n    constructor(props) {\n        super(props);\n        this.ref = firebase.firestore().collection('timers').orderBy('name');\n        this.unsubscribe = null;\n        this.state = {\n            isLoading: true,\n            timers: []\n        };\n    }\n\n    onCollectionUpdate = (querySnapshot) => {\n        const timers = [];\n        querySnapshot.forEach((doc) => {\n            const { name, tasks,image } = doc.data();\n            timers.push({\n                key: doc.id,\n                doc, // DocumentSnapshot\n                name,\n                tasks,\n                image\n            });\n        });\n        console.log(\"Setting state\");\n        console.log(this.state);\n        console.log(timers['name']);\n        this.setState({\n            timers : timers,\n            isLoading: false,\n        });\n        console.log(\"After setting state\");\n        console.log(timers);\n    }\n\n    componentDidMount() {\n        this.unsubscribe = this.ref.onSnapshot(this.onCollectionUpdate);\n    }\n\n    static navigationOptions = ({ navigation }) => {\n        return {\n            title: 'My Timers',\n            headerRight: (\n                <Button\n                    buttonStyle={{ padding: 0, backgroundColor: 'transparent' }}\n                    icon={{ name: 'add-circle', style: { marginRight: 20, fontSize: 28 } }}\n                    onPress={() => { navigation.push('AddTimer') }}\n                />\n            ),\n        };\n    };\n\n\n    render() {\n        if(this.state.isLoading){\n            return(\n                <View style={styles.activity}>\n                    <ActivityIndicator size=\"large\" color=\"#0000ff\"/>\n                </View>\n            )\n        }\n        return (\n            <ScrollView style={styles.container}>\n\n                    {\n                        this.state.timers.map((item, i) => (\n                            <ListItem\n                                key={i}\n                                bottomDivider\n                                onPress={() => {\n                                    this.props.navigation.navigate('RunTimer', {\n                                        timerkey: `${JSON.stringify(item.key)}`,\n                                        timerName: `${JSON.stringify(item.name)}`,\n                                    });\n                                }}\n                            >\n                                <Avatar source={{uri: item.image}} />\n                                <ListItem.Content>\n                                    <ListItem.Title >{item.name}</ListItem.Title>\n                                </ListItem.Content>\n                                <TouchableOpacity>\n                                    <Button\n                                        buttonStyle={{ padding: 0, backgroundColor: 'transparent' }}\n                                        icon={{ name: 'create', style: { marginRight: 20, fontSize: 28 } }}\n                                        onPress={() => {\n                                            this.props.navigation.navigate('TimerDetails', {\n                                                timerkey: `${JSON.stringify(item.key)}`,\n                                                timerName: `${JSON.stringify(item.name)}`,\n                                            });\n                                        }}\n                                    />\n                                </TouchableOpacity>\n\n                                <ListItem.Chevron />\n\n                            </ListItem>\n                        ))\n                    }\n\n            </ScrollView>\n        );\n    }\n}\n\n                           // <ListItem key={i} bottomDivider >\n                           //     <ListItem.Content>\n                           //         <ListItem.Title >{item.name}</ListItem.Title>\n//\n                            //    </ListItem.Content>\n\n                          //  </ListItem>\n\n\n\n\n\n\n\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        paddingBottom: 22\n    },\n    item: {\n        padding: 10,\n        fontSize: 18,\n        height: 44,\n    },\n    activity: {\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        alignItems: 'center',\n        justifyContent: 'center'\n    }\n})\n\nexport default TimerScreen;"]},"metadata":{},"sourceType":"module"}